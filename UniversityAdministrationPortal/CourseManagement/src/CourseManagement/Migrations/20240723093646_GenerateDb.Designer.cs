// <auto-generated />
using System;
using CourseManagement.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseManagement.Migrations
{
    [DbContext(typeof(CourseManagementDbContext))]
    [Migration("20240723093646_GenerateDb")]
    partial class GenerateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseManagement.Domain.Courses.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("course_name");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_on");

                    b.Property<int>("Credits")
                        .HasColumnType("int")
                        .HasColumnName("credits");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTimeOffset?>("LastModifiedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Syllabus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("syllabus");

                    b.HasKey("Id")
                        .HasName("pk_courses");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("CourseManagement.Domain.Enrollments.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("enrollment_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTimeOffset?>("LastModifiedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("last_modified_on");

                    b.Property<Guid>("StudentID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("pk_enrollments");

                    b.HasIndex("CourseID")
                        .HasDatabaseName("ix_enrollments_course_id");

                    b.HasIndex("StudentID")
                        .HasDatabaseName("ix_enrollments_student_id");

                    b.ToTable("enrollments", (string)null);
                });

            modelBuilder.Entity("CourseManagement.Domain.Instructors.Instructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTimeOffset?>("LastModifiedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("pk_instructors");

                    b.ToTable("instructors", (string)null);
                });

            modelBuilder.Entity("CourseManagement.Domain.LectureHalls.LectureHall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTimeOffset?>("LastModifiedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("RoomNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("room_number");

                    b.HasKey("Id")
                        .HasName("pk_lecture_halls");

                    b.ToTable("lecture_halls", (string)null);
                });

            modelBuilder.Entity("CourseManagement.Domain.Prerequisites.Prerequisite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTimeOffset?>("LastModifiedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("last_modified_on");

                    b.Property<Guid>("PrerequisiteCourseID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("prerequisite_course_id");

                    b.HasKey("Id")
                        .HasName("pk_prerequisites");

                    b.HasIndex("CourseID")
                        .HasDatabaseName("ix_prerequisites_course_id");

                    b.ToTable("prerequisites", (string)null);
                });

            modelBuilder.Entity("CourseManagement.Domain.Resources.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTimeOffset?>("LastModifiedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("last_modified_on");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("ResourceName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("resource_name");

                    b.Property<string>("ResourceType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("resource_type");

                    b.HasKey("Id")
                        .HasName("pk_resources");

                    b.HasIndex("CourseID")
                        .HasDatabaseName("ix_resources_course_id");

                    b.ToTable("resources", (string)null);
                });

            modelBuilder.Entity("CourseManagement.Domain.Schedules.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("ClassTiming")
                        .HasColumnType("datetime2")
                        .HasColumnName("class_timing");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_on");

                    b.Property<Guid>("InstructorID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("instructor_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTimeOffset?>("LastModifiedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("last_modified_on");

                    b.Property<Guid?>("LectureHallId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("lecture_hall_id");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location");

                    b.HasKey("Id")
                        .HasName("pk_schedules");

                    b.HasIndex("CourseID")
                        .HasDatabaseName("ix_schedules_course_id");

                    b.HasIndex("InstructorID")
                        .HasDatabaseName("ix_schedules_instructor_id");

                    b.HasIndex("LectureHallId")
                        .HasDatabaseName("ix_schedules_lecture_hall_id");

                    b.ToTable("schedules", (string)null);
                });

            modelBuilder.Entity("CourseManagement.Domain.Students.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("gender_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTimeOffset?>("LastModifiedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("MatriculationNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("matriculation_number");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("pk_students");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("CourseManagement.Domain.Enrollments.Enrollment", b =>
                {
                    b.HasOne("CourseManagement.Domain.Courses.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enrollments_courses_course_id");

                    b.HasOne("CourseManagement.Domain.Students.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enrollments_students_student_id");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseManagement.Domain.Prerequisites.Prerequisite", b =>
                {
                    b.HasOne("CourseManagement.Domain.Courses.Course", "Course")
                        .WithMany("Prerequisites")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prerequisites_courses_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseManagement.Domain.Resources.Resource", b =>
                {
                    b.HasOne("CourseManagement.Domain.Courses.Course", "Course")
                        .WithMany("Resources")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_resources_courses_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseManagement.Domain.Schedules.Schedule", b =>
                {
                    b.HasOne("CourseManagement.Domain.Courses.Course", "Course")
                        .WithMany("Schedules")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_schedules_courses_course_id");

                    b.HasOne("CourseManagement.Domain.Instructors.Instructor", "Instructor")
                        .WithMany("Schedules")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_schedules_instructors_instructor_id");

                    b.HasOne("CourseManagement.Domain.LectureHalls.LectureHall", "LectureHall")
                        .WithMany("Schedules")
                        .HasForeignKey("LectureHallId")
                        .HasConstraintName("fk_schedules_lecture_halls_lecture_hall_id");

                    b.Navigation("Course");

                    b.Navigation("Instructor");

                    b.Navigation("LectureHall");
                });

            modelBuilder.Entity("CourseManagement.Domain.Courses.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Prerequisites");

                    b.Navigation("Resources");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("CourseManagement.Domain.Instructors.Instructor", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("CourseManagement.Domain.LectureHalls.LectureHall", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("CourseManagement.Domain.Students.Student", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
